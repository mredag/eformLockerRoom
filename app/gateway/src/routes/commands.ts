/**
 * Command Bus API Routes
 * 
 * Provides REST API endpoints for remote command execution
 * Requirements: 8.1, 8.4
 */

import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';
import { CommandBus, RemoteCommand, RemoteCommandType } from '../services/command-bus';

interface ExecuteCommandRequest {
  Body: {
    type: RemoteCommandType;
    kioskId: string;
    lockerId?: number;
    parameters?: Record<string, any>;
    priority?: 'low' | 'normal' | 'high';
  };
}

interface CommandHistoryRequest {
  Querystring: {
    kioskId?: string;
    limit?: number;
  };
}

interface CommandStatsRequest {
  Querystring: {
    kioskId?: string;
  };
}

export async function commandRoutes(fastify: FastifyInstance, options: { websocketManager: any }) {
  const commandBus = new CommandBus({ webSocketManager: options.websocketManager });

  // Execute a remote command
  fastify.post<ExecuteCommandRequest>('/api/commands/execute', {
    schema: {
      body: {
        type: 'object',
        required: ['type', 'kioskId'],
        properties: {
          type: {
            type: 'string',
            enum: ['open', 'close', 'reset', 'buzzer']
          },
          kioskId: {
            type: 'string',
            minLength: 1
          },
          lockerId: {
            type: 'integer',
            minimum: 1,
            maximum: 30
          },
          parameters: {
            type: 'object'
          },
          priority: {
            type: 'string',
            enum: ['low', 'normal', 'high'],
            default: 'normal'
          }
        }
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: { type: 'boolean' },
            commandId: { type: 'string' },
            queued: { type: 'boolean' },
            result: {
              type: 'object',
              properties: {
                success: { type: 'boolean' },
                message: { type: 'string' },
                error: { type: 'string' },
                executionTimeMs: { type: 'number' },
                responseData: { type: 'object' }
              }
            }
          }
        },
        400: {
          type: 'object',
          properties: {
            success: { type: 'boolean' },
            error: { type: 'string' }
          }
        },
        401: {
          type: 'object',
          properties: {
            success: { type: 'boolean' },
            error: { type: 'string' }
          }
        },
        403: {
          type: 'object',
          properties: {
            success: { type: 'boolean' },
            error: { type: 'string' }
          }
        }
      }
    }
  }, async (request: FastifyRequest<ExecuteCommandRequest>, reply: FastifyReply) => {
    try {
      // Get authenticated user from session
      const session = request.session;
      if (!session?.user) {
        return reply.status(401).send({
          success: false,
          error: 'Authentication required'
        });
      }

      const { type, kioskId, lockerId, parameters, priority } = request.body;

      // Create command object
      const command: RemoteCommand = {
        id: '', // Will be generated by command bus
        type,
        kioskId,
        lockerId,
        parameters,
        issuedBy: session.user.username,
        issuedAt: new Date(),
        priority: priority || 'normal'
      };

      // Execute command through command bus
      const result = await commandBus.executeCommand(command);

      return reply.send({
        success: true,
        commandId: result.commandId,
        queued: result.queued,
        result: result.result
      });

    } catch (error) {
      console.error('Command execution error:', error);
      
      if (error.message.includes('validation failed') || error.message.includes('authorization failed')) {
        return reply.status(400).send({
          success: false,
          error: error.message
        });
      }

      return reply.status(500).send({
        success: false,
        error: 'Internal server error during command execution'
      });
    }
  });

  // Get command execution history
  fastify.get<CommandHistoryRequest>('/api/commands/history', {
    schema: {
      querystring: {
        type: 'object',
        properties: {
          kioskId: {
            type: 'string'
          },
          limit: {
            type: 'integer',
            minimum: 1,
            maximum: 100,
            default: 50
          }
        }
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: { type: 'boolean' },
            data: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  id: { type: 'integer' },
                  command_id: { type: 'string' },
                  kiosk_id: { type: 'string' },
                  locker_id: { type: ['integer', 'null'] },
                  command_type: { type: 'string' },
                  issued_by: { type: 'string' },
                  success: { type: ['integer', 'null'] },
                  message: { type: ['string', 'null'] },
                  error: { type: ['string', 'null'] },
                  execution_time_ms: { type: ['integer', 'null'] },
                  created_at: { type: 'string' }
                }
              }
            }
          }
        }
      }
    }
  }, async (request: FastifyRequest<CommandHistoryRequest>, reply: FastifyReply) => {
    try {
      // Check authentication
      const session = request.session;
      if (!session?.user) {
        return reply.status(401).send({
          success: false,
          error: 'Authentication required'
        });
      }

      const { kioskId, limit } = request.query;

      const history = await commandBus.getCommandHistory(kioskId, limit || 50);

      return reply.send({
        success: true,
        data: history
      });

    } catch (error) {
      console.error('Error getting command history:', error);
      return reply.status(500).send({
        success: false,
        error: 'Failed to retrieve command history'
      });
    }
  });

  // Get command execution statistics
  fastify.get<CommandStatsRequest>('/api/commands/stats', {
    schema: {
      querystring: {
        type: 'object',
        properties: {
          kioskId: {
            type: 'string'
          }
        }
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: { type: 'boolean' },
            data: {
              type: 'object',
              properties: {
                total: { type: 'integer' },
                successful: { type: 'integer' },
                failed: { type: 'integer' },
                queued: { type: 'integer' },
                successRate: { type: 'number' }
              }
            }
          }
        }
      }
    }
  }, async (request: FastifyRequest<CommandStatsRequest>, reply: FastifyReply) => {
    try {
      // Check authentication
      const session = request.session;
      if (!session?.user) {
        return reply.status(401).send({
          success: false,
          error: 'Authentication required'
        });
      }

      const { kioskId } = request.query;

      const stats = await commandBus.getCommandStats(kioskId);

      return reply.send({
        success: true,
        data: stats
      });

    } catch (error) {
      console.error('Error getting command stats:', error);
      return reply.status(500).send({
        success: false,
        error: 'Failed to retrieve command statistics'
      });
    }
  });

  // Health check endpoint for command bus
  fastify.get('/api/commands/health', async (request: FastifyRequest, reply: FastifyReply) => {
    try {
      // Basic health check - verify command bus can access database
      const stats = await commandBus.getCommandStats();
      
      return reply.send({
        success: true,
        status: 'healthy',
        timestamp: new Date().toISOString(),
        stats: {
          totalCommands: stats.total,
          successRate: stats.successRate
        }
      });

    } catch (error) {
      console.error('Command bus health check failed:', error);
      return reply.status(503).send({
        success: false,
        status: 'unhealthy',
        error: 'Command bus health check failed'
      });
    }
  });
}